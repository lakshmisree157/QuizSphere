# Adaptive Quiz Application - Deployment Plan

## ðŸŽ¯ **Best Free Deployment Options**

### **Option 1: Render.com (Recommended - Easiest)**
**Cost**: Free tier available
**Pros**: Easy deployment, automatic SSL, good integration
**Cons**: Free tier has limitations

### **Option 2: Railway.app (Alternative)**
**Cost**: Free tier available  
**Pros**: Simple deployment, good for full-stack apps
**Cons**: Limited free tier

### **Option 3: Vercel + Render + Railway (Most Flexible)**
**Cost**: Free tiers available
**Pros**: Best performance, specialized services
**Cons**: More complex setup

---

## ðŸš€ **Option 1: Render.com (Complete Solution)**

### **Architecture**
```
Frontend (React) â†’ Render Static Site
Backend (Node.js) â†’ Render Web Service  
ML Service (Python) â†’ Render Web Service
Database â†’ MongoDB Atlas (Free Tier)
```

### **Step-by-Step Deployment**

#### **1. Database Setup (MongoDB Atlas)**
```bash
# 1. Go to mongodb.com/atlas
# 2. Create free account
# 3. Create new cluster (M0 Free)
# 4. Set up database access:
   Username: quizuser
   Password: securepassword123
# 5. Set up network access: 0.0.0.0/0 (allow all)
# 6. Get connection string:
   mongodb+srv://quizuser:securepassword123@cluster0.xxxxx.mongodb.net/adaptive-quiz
```

#### **2. Backend Deployment (Render)**
```bash
# 1. Go to render.com
# 2. Connect your GitHub repository
# 3. Create new Web Service
# 4. Configure:
   Name: adaptive-quiz-backend
   Environment: Node
   Build Command: cd server && npm install
   Start Command: cd server && node server.js
   Root Directory: server

# 5. Environment Variables:
   NODE_ENV=production
   PORT=10000
   MONGODB_URI=mongodb+srv://quizuser:securepassword123@cluster0.xxxxx.mongodb.net/adaptive-quiz
   JWT_SECRET=your-super-secure-jwt-secret-key-here
   CLIENT_URL=https://your-frontend-app.onrender.com
   ML_SERVICE_URL=https://your-ml-service.onrender.com

# 6. Deploy
# 7. Get backend URL: https://adaptive-quiz-backend.onrender.com
```

#### **3. ML Service Deployment (Render)**
```bash
# 1. Create new Web Service on Render
# 2. Configure:
   Name: adaptive-quiz-ml
   Environment: Python 3
   Build Command: pip install -r requirements.txt
   Start Command: python server.py
   Root Directory: ml-service

# 3. Environment Variables:
   PORT=10000
   HOST=0.0.0.0

# 4. Deploy
# 5. Get ML service URL: https://adaptive-quiz-ml.onrender.com
```

#### **4. Frontend Deployment (Render)**
```bash
# 1. Create new Static Site on Render
# 2. Configure:
   Name: adaptive-quiz-frontend
   Build Command: npm install && npm run build
   Publish Directory: build
   Root Directory: client

# 3. Environment Variables:
   REACT_APP_API_URL=https://adaptive-quiz-backend.onrender.com
   REACT_APP_ENV=production

# 4. Deploy
# 5. Get frontend URL: https://adaptive-quiz-frontend.onrender.com
```

---

## ðŸš€ **Option 2: Railway.app (Alternative)**

### **Architecture**
```
Frontend + Backend + ML Service â†’ Railway
Database â†’ MongoDB Atlas
```

### **Step-by-Step Deployment**

#### **1. Database Setup (Same as Option 1)**

#### **2. Railway Deployment**
```bash
# 1. Go to railway.app
# 2. Connect GitHub repository
# 3. Create new project
# 4. Add services:

# Backend Service:
   Name: backend
   Root Directory: server
   Build Command: npm install
   Start Command: node server.js
   Port: 5000

# ML Service:
   Name: ml-service  
   Root Directory: ml-service
   Build Command: pip install -r requirements.txt
   Start Command: python server.py
   Port: 8000

# Frontend Service:
   Name: frontend
   Root Directory: client
   Build Command: npm install && npm run build
   Start Command: npx serve -s build -l 3000
   Port: 3000

# 5. Environment Variables (shared):
   NODE_ENV=production
   MONGODB_URI=mongodb+srv://...
   JWT_SECRET=your-secret
   CLIENT_URL=https://your-frontend.railway.app
   ML_SERVICE_URL=https://your-ml-service.railway.app
   REACT_APP_API_URL=https://your-backend.railway.app
```

---

## ðŸš€ **Option 3: Vercel + Render + Railway (Best Performance)**

### **Architecture**
```
Frontend (React) â†’ Vercel (Best for React)
Backend (Node.js) â†’ Render
ML Service (Python) â†’ Railway
Database â†’ MongoDB Atlas
```

### **Step-by-Step Deployment**

#### **1. Frontend (Vercel)**
```bash
# 1. Go to vercel.com
# 2. Connect GitHub repository
# 3. Configure:
   Framework Preset: Create React App
   Root Directory: client
   Build Command: npm run build
   Output Directory: build

# 4. Environment Variables:
   REACT_APP_API_URL=https://your-backend.onrender.com
   REACT_APP_ENV=production

# 5. Deploy
# 6. Get URL: https://your-app.vercel.app
```

#### **2. Backend (Render) - Same as Option 1**

#### **3. ML Service (Railway) - Same as Option 2**

---

## ðŸ”§ **Pre-Deployment Preparation**

### **1. Update Environment Files**

#### **Backend (.env)**
```env
NODE_ENV=production
PORT=10000
MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/adaptive-quiz
JWT_SECRET=your-super-secure-jwt-secret-key-here
CLIENT_URL=https://your-frontend-domain.com
ML_SERVICE_URL=https://your-ml-service-domain.com
```

#### **Frontend (.env)**
```env
REACT_APP_API_URL=https://your-backend-domain.com
REACT_APP_ENV=production
```

#### **ML Service (.env)**
```env
PORT=10000
HOST=0.0.0.0
```

### **2. Update Package.json Scripts**

#### **Backend (server/package.json)**
```json
{
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "build": "echo 'No build step needed'"
  }
}
```

#### **Frontend (client/package.json)**
```json
{
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  }
}
```

### **3. Create Render Configuration Files**

#### **Backend (server/render.yaml)**
```yaml
services:
  - type: web
    name: adaptive-quiz-backend
    env: node
    buildCommand: npm install
    startCommand: node server.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 10000
```

#### **ML Service (ml-service/render.yaml)**
```yaml
services:
  - type: web
    name: adaptive-quiz-ml
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: python server.py
    envVars:
      - key: PORT
        value: 10000
      - key: HOST
        value: 0.0.0.0
```

---

## ðŸ”„ **Deployment Flow**

### **Phase 1: Database Setup**
1. Create MongoDB Atlas account
2. Set up cluster and database
3. Configure network access
4. Get connection string

### **Phase 2: Backend Deployment**
1. Deploy backend to Render/Railway
2. Configure environment variables
3. Test API endpoints
4. Verify database connection

### **Phase 3: ML Service Deployment**
1. Deploy ML service to Render/Railway
2. Configure environment variables
3. Test ML endpoints
4. Verify backend-ML communication

### **Phase 4: Frontend Deployment**
1. Deploy frontend to Vercel/Render
2. Configure environment variables
3. Update API URLs
4. Test complete flow

### **Phase 5: Integration Testing**
1. Test end-to-end functionality
2. Verify all services communicate
3. Check error handling
4. Monitor performance

---

## ðŸ“Š **Cost Comparison**

| Platform | Frontend | Backend | ML Service | Total |
|----------|----------|---------|------------|-------|
| Render | Free | Free | Free | $0/month |
| Railway | Free | Free | Free | $0/month |
| Vercel+Render+Railway | Free | Free | Free | $0/month |

**Note**: Free tiers have limitations:
- Render: 750 hours/month, sleep after inactivity
- Railway: $5 credit/month (usually covers small apps)
- Vercel: Unlimited static sites, 100GB bandwidth

---

## ðŸš¨ **Important Notes**

### **Free Tier Limitations**
1. **Render**: Services sleep after 15 minutes of inactivity
2. **Railway**: Limited bandwidth and compute
3. **Vercel**: Function timeout limits

### **Scaling Considerations**
- Start with free tiers
- Monitor usage
- Upgrade when needed
- Consider paid plans for production

### **Security**
- Use strong JWT secrets
- Enable MongoDB Atlas security features
- Set up proper CORS
- Use HTTPS (automatic on these platforms)

---

## âœ… **Post-Deployment Checklist**

- [ ] All services are running
- [ ] Database connection successful
- [ ] API endpoints responding
- [ ] Frontend loads correctly
- [ ] User registration/login works
- [ ] PDF upload functional
- [ ] Quiz creation works
- [ ] Quiz taking works
- [ ] Feedback system works
- [ ] ML service integration works
- [ ] Error handling functional
- [ ] Performance acceptable

---

## ðŸ†˜ **Troubleshooting**

### **Common Issues**
1. **CORS Errors**: Check CLIENT_URL in backend
2. **Database Connection**: Verify MongoDB Atlas settings
3. **ML Service Timeout**: Check service URLs
4. **Build Failures**: Check package.json scripts

### **Support Resources**
- Render: https://render.com/docs
- Railway: https://docs.railway.app
- Vercel: https://vercel.com/docs
- MongoDB Atlas: https://docs.atlas.mongodb.com

---

**Recommended Choice**: **Option 1 (Render.com)** for simplicity and ease of use.
**Best Performance**: **Option 3 (Vercel + Render + Railway)** for optimal performance.
